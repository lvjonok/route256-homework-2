// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: api/api.proto

package homework_2

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MathHelperClient is the client API for MathHelper service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MathHelperClient interface {
	ParseProblems(ctx context.Context, in *ParseProblemsRequest, opts ...grpc.CallOption) (*ParseProblemsResponse, error)
	GetRating(ctx context.Context, in *GetRatingRequest, opts ...grpc.CallOption) (*GetRatingResponse, error)
	GetStat(ctx context.Context, in *GetStatRequest, opts ...grpc.CallOption) (*GetStatResponse, error)
	CheckAnswer(ctx context.Context, in *CheckAnswerRequest, opts ...grpc.CallOption) (*CheckAnswerResponse, error)
	GetRandom(ctx context.Context, in *GetRandomRequest, opts ...grpc.CallOption) (*GetRandomResponse, error)
	GetProblem(ctx context.Context, in *GetProblemRequest, opts ...grpc.CallOption) (*GetProblemResponse, error)
}

type mathHelperClient struct {
	cc grpc.ClientConnInterface
}

func NewMathHelperClient(cc grpc.ClientConnInterface) MathHelperClient {
	return &mathHelperClient{cc}
}

func (c *mathHelperClient) ParseProblems(ctx context.Context, in *ParseProblemsRequest, opts ...grpc.CallOption) (*ParseProblemsResponse, error) {
	out := new(ParseProblemsResponse)
	err := c.cc.Invoke(ctx, "/api.MathHelper/ParseProblems", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mathHelperClient) GetRating(ctx context.Context, in *GetRatingRequest, opts ...grpc.CallOption) (*GetRatingResponse, error) {
	out := new(GetRatingResponse)
	err := c.cc.Invoke(ctx, "/api.MathHelper/GetRating", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mathHelperClient) GetStat(ctx context.Context, in *GetStatRequest, opts ...grpc.CallOption) (*GetStatResponse, error) {
	out := new(GetStatResponse)
	err := c.cc.Invoke(ctx, "/api.MathHelper/GetStat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mathHelperClient) CheckAnswer(ctx context.Context, in *CheckAnswerRequest, opts ...grpc.CallOption) (*CheckAnswerResponse, error) {
	out := new(CheckAnswerResponse)
	err := c.cc.Invoke(ctx, "/api.MathHelper/CheckAnswer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mathHelperClient) GetRandom(ctx context.Context, in *GetRandomRequest, opts ...grpc.CallOption) (*GetRandomResponse, error) {
	out := new(GetRandomResponse)
	err := c.cc.Invoke(ctx, "/api.MathHelper/GetRandom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mathHelperClient) GetProblem(ctx context.Context, in *GetProblemRequest, opts ...grpc.CallOption) (*GetProblemResponse, error) {
	out := new(GetProblemResponse)
	err := c.cc.Invoke(ctx, "/api.MathHelper/GetProblem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MathHelperServer is the server API for MathHelper service.
// All implementations must embed UnimplementedMathHelperServer
// for forward compatibility
type MathHelperServer interface {
	ParseProblems(context.Context, *ParseProblemsRequest) (*ParseProblemsResponse, error)
	GetRating(context.Context, *GetRatingRequest) (*GetRatingResponse, error)
	GetStat(context.Context, *GetStatRequest) (*GetStatResponse, error)
	CheckAnswer(context.Context, *CheckAnswerRequest) (*CheckAnswerResponse, error)
	GetRandom(context.Context, *GetRandomRequest) (*GetRandomResponse, error)
	GetProblem(context.Context, *GetProblemRequest) (*GetProblemResponse, error)
	mustEmbedUnimplementedMathHelperServer()
}

// UnimplementedMathHelperServer must be embedded to have forward compatible implementations.
type UnimplementedMathHelperServer struct {
}

func (UnimplementedMathHelperServer) ParseProblems(context.Context, *ParseProblemsRequest) (*ParseProblemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ParseProblems not implemented")
}
func (UnimplementedMathHelperServer) GetRating(context.Context, *GetRatingRequest) (*GetRatingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRating not implemented")
}
func (UnimplementedMathHelperServer) GetStat(context.Context, *GetStatRequest) (*GetStatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStat not implemented")
}
func (UnimplementedMathHelperServer) CheckAnswer(context.Context, *CheckAnswerRequest) (*CheckAnswerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckAnswer not implemented")
}
func (UnimplementedMathHelperServer) GetRandom(context.Context, *GetRandomRequest) (*GetRandomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRandom not implemented")
}
func (UnimplementedMathHelperServer) GetProblem(context.Context, *GetProblemRequest) (*GetProblemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProblem not implemented")
}
func (UnimplementedMathHelperServer) mustEmbedUnimplementedMathHelperServer() {}

// UnsafeMathHelperServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MathHelperServer will
// result in compilation errors.
type UnsafeMathHelperServer interface {
	mustEmbedUnimplementedMathHelperServer()
}

func RegisterMathHelperServer(s grpc.ServiceRegistrar, srv MathHelperServer) {
	s.RegisterService(&MathHelper_ServiceDesc, srv)
}

func _MathHelper_ParseProblems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParseProblemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MathHelperServer).ParseProblems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.MathHelper/ParseProblems",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MathHelperServer).ParseProblems(ctx, req.(*ParseProblemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MathHelper_GetRating_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRatingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MathHelperServer).GetRating(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.MathHelper/GetRating",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MathHelperServer).GetRating(ctx, req.(*GetRatingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MathHelper_GetStat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MathHelperServer).GetStat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.MathHelper/GetStat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MathHelperServer).GetStat(ctx, req.(*GetStatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MathHelper_CheckAnswer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckAnswerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MathHelperServer).CheckAnswer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.MathHelper/CheckAnswer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MathHelperServer).CheckAnswer(ctx, req.(*CheckAnswerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MathHelper_GetRandom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRandomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MathHelperServer).GetRandom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.MathHelper/GetRandom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MathHelperServer).GetRandom(ctx, req.(*GetRandomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MathHelper_GetProblem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProblemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MathHelperServer).GetProblem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.MathHelper/GetProblem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MathHelperServer).GetProblem(ctx, req.(*GetProblemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MathHelper_ServiceDesc is the grpc.ServiceDesc for MathHelper service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MathHelper_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.MathHelper",
	HandlerType: (*MathHelperServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ParseProblems",
			Handler:    _MathHelper_ParseProblems_Handler,
		},
		{
			MethodName: "GetRating",
			Handler:    _MathHelper_GetRating_Handler,
		},
		{
			MethodName: "GetStat",
			Handler:    _MathHelper_GetStat_Handler,
		},
		{
			MethodName: "CheckAnswer",
			Handler:    _MathHelper_CheckAnswer_Handler,
		},
		{
			MethodName: "GetRandom",
			Handler:    _MathHelper_GetRandom_Handler,
		},
		{
			MethodName: "GetProblem",
			Handler:    _MathHelper_GetProblem_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/api.proto",
}
